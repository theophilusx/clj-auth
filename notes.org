#+TITLE: Notes

Various developer notes put here so we don't forget.

* System Configuration

Two configuration files are used to define build and run tasks for this module. These
configuration files are located in the ~resources~ sub-directory. The first file is
~./resources/dev-config.edn~. This file is stored in git and does ot contain any sensitive
information. It contains basic configuration options for the library. Once you move into a
production situation, you would generate a ~prod-config.edn~ copy which you would then edit
to match your production configuration.

The second configuraiton file is ~./resources/.env.edn~. This file does contain sensitive
information, such as passwords. It is not and should not, be stored in git. This file has
the following entries

#+begin_example
{:db-user "auth"
 :db-password "XXXXX"
 :db-name "devel"
 :db-host "localhost"
 :db-port 5432
 :db-password-file ".pgpass"
 :db-script-path "resources/db"
 :smtp-server "smtp.example.com"
 :smtp-port 587
 :smtp-tls true
 :smtp-user "user@example.com"
 :smtp-password "XXXXXXX"
 :smtp-from "\"Auth System\" <user@example.com>"
 :smtp-dev-address "\"Auth Dev Address\" <dev@example.com>"
 :config-file "resources/dev-config.edn"}
#+end_example

* Database Setup

The software uses PostgreSQL as a backend database store. This is the process used to
create the DB.

- Create database using psql e.g.

  : sudo -u postgres psql

- Create a user and database for use as credential storage source e.g.

  #+begin_example
  postgres=# CREATE USER auth WITH PASSWORD 'xxxx';
  postgres=# CREATE DATABASE devel;
  #+end_example

- Log into the database and create an ~auth~ schema with the auth user authorized to modify
  it.

#+begin_example
  devel=# CREATE SCHEMA auth AUTHORIZATION auth;
#+end_example

Once the database and user have been defined, the rest of the setup and configuration is
managed via /Babashka/ script tasks. Note that the babashka scripts use the configuration
files outlined above. It is important to update these files to suit your local setup
before attempting to use the babashka scripts. 
To see a complete list of /Babashka/ tasks, run

  : bb tasks

The first script to run is

  : bb run pgpass

This will create a .pgpass password file int he root of the project repository. This file
is used by Postgres client tools such as pgsql.

If you change the password being used by the library database user e.g. ~auth~ by default,
you need to update the ~./resources/.env.edn~ file and re-run ~bb run pgpass~ to update the
.pgpass file.

To build the database, run

  : bb run build-db

To destroy the database (in case you want to re-build a clean versions), run

  : bb run destroy-db

* Error Codes

Using simple keywords for different error classification at this point. May change this
later. Tracking names/meaning here

- :db-access :: Error accessing the database
- :db-error :: Generic database access error
- :duplicate-id :: An identity with the same identifier (email address) already exists.

* Return values

Most of the fucntions, especially database, web and other external system
interface functions, such as for sending mail, will return a map. This map will have a
minimum of 2 keys, =:status= and =:result=. The =:status= key will be either =:ok=, indicating an
OK expected return value or =:error=, indicating an error has occurred. The =:result= key will
be either a map or nil. When =nil=, it indicates no specific value was returned. When it is
a map, it will be a map of one or more keys which represent the data being
returned. Precisely what keys will depend on the function and data.

In addition to these two keys which will always be present (when =:status= is equal to
=:error=, the =:result= key will be nil), additional keys are included when there is an
error. These keys are =:error-code=, =:error-msg= and =:error-name=. These additional keys ahve
the following defintiions:

- =:error-code= :: A string representing an error code. THis is often a code taken from an
  external source reference, such as a database error code, a remote system error code
  etc.

- =:error-name= :: A keyword which is a symbolic name for a type of error. The list of
  defined error names is included in this file. e.g. =:not-found=.

- =:error-msg= :: A string error message. Typically a message for humans!

* Terms

There are a number of terms used within the identity and access management space which are
used inconsistently or which may have different inherent meanings to some. This list
defines what is meant by these terms within *this* project.

- 2FA :: Two factor authentication. Describes an /authn/ process which requires to distinct
  factors in order to verify an identity. For example, a password and a hardware key or
  fingerprint etc.
  
- authn :: The authentication process. Establishing an identity is who they say they are.

- authz :: The authorisation process. Determining what an authenticated identityh is
  allowed to do or access.

- identity :: The base object. Most often, this is an individual (a user), but it could
  just as easily be a group. An identify must have a way to identify themselves i.e. a
  passsword for single factor /authn/ or maybe a password and a token for multi-factor
  authn.

- hash :: A function, which when applied to an input value, will return a new value which
  is guaranteed to be unique to the input value and which is guaranteed to always be the
  same given the same input value, but which cannot be reversed to determine the input
  value. Typically used for secure password storage. 
  
- OTP :: One time password. A password which can only be used once.
  
- password :: A secret only known to an identity. 

- TOTP :: Timed one time password. A single use password which must be used within a
  specified time period i.e. 60 seconds.



